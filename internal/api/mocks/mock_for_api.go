// Code generated by MockGen. DO NOT EDIT.
// Source: internal/api/interface.go

// Package mock_api is a generated GoMock package.
package mock_api

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/Dsmit05/party-day-bot/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockBotI is a mock of BotI interface.
type MockBotI struct {
	ctrl     *gomock.Controller
	recorder *MockBotIMockRecorder
}

// MockBotIMockRecorder is the mock recorder for MockBotI.
type MockBotIMockRecorder struct {
	mock *MockBotI
}

// NewMockBotI creates a new mock instance.
func NewMockBotI(ctrl *gomock.Controller) *MockBotI {
	mock := &MockBotI{ctrl: ctrl}
	mock.recorder = &MockBotIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBotI) EXPECT() *MockBotIMockRecorder {
	return m.recorder
}

// SendMsg mocks base method.
func (m *MockBotI) SendMsg(ctx context.Context, user models.User, msg string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", ctx, user, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockBotIMockRecorder) SendMsg(ctx, user, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBotI)(nil).SendMsg), ctx, user, msg)
}

// SendMsgAllUser mocks base method.
func (m *MockBotI) SendMsgAllUser(ctx context.Context, msg string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsgAllUser", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsgAllUser indicates an expected call of SendMsgAllUser.
func (mr *MockBotIMockRecorder) SendMsgAllUser(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsgAllUser", reflect.TypeOf((*MockBotI)(nil).SendMsgAllUser), ctx, msg)
}

// SendPhoto mocks base method.
func (m *MockBotI) SendPhoto(ctx context.Context, user models.User, url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPhoto", ctx, user, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendPhoto indicates an expected call of SendPhoto.
func (mr *MockBotIMockRecorder) SendPhoto(ctx, user, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPhoto", reflect.TypeOf((*MockBotI)(nil).SendPhoto), ctx, user, url)
}

// MockConfigI is a mock of ConfigI interface.
type MockConfigI struct {
	ctrl     *gomock.Controller
	recorder *MockConfigIMockRecorder
}

// MockConfigIMockRecorder is the mock recorder for MockConfigI.
type MockConfigIMockRecorder struct {
	mock *MockConfigI
}

// NewMockConfigI creates a new mock instance.
func NewMockConfigI(ctrl *gomock.Controller) *MockConfigI {
	mock := &MockConfigI{ctrl: ctrl}
	mock.recorder = &MockConfigIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigI) EXPECT() *MockConfigIMockRecorder {
	return m.recorder
}

// GetApiGRPCServerAddr mocks base method.
func (m *MockConfigI) GetApiGRPCServerAddr() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApiGRPCServerAddr")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetApiGRPCServerAddr indicates an expected call of GetApiGRPCServerAddr.
func (mr *MockConfigIMockRecorder) GetApiGRPCServerAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiGRPCServerAddr", reflect.TypeOf((*MockConfigI)(nil).GetApiGRPCServerAddr))
}

// GetApiGRPCServerTimeout mocks base method.
func (m *MockConfigI) GetApiGRPCServerTimeout() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApiGRPCServerTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetApiGRPCServerTimeout indicates an expected call of GetApiGRPCServerTimeout.
func (mr *MockConfigIMockRecorder) GetApiGRPCServerTimeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiGRPCServerTimeout", reflect.TypeOf((*MockConfigI)(nil).GetApiGRPCServerTimeout))
}

// GetApiHTTPServerAddr mocks base method.
func (m *MockConfigI) GetApiHTTPServerAddr() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApiHTTPServerAddr")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetApiHTTPServerAddr indicates an expected call of GetApiHTTPServerAddr.
func (mr *MockConfigIMockRecorder) GetApiHTTPServerAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiHTTPServerAddr", reflect.TypeOf((*MockConfigI)(nil).GetApiHTTPServerAddr))
}
